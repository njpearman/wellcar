#!/usr/bin/env ruby
require 'gli'
begin # XXX: Remove this begin/rescue before distributing your app
require 'wellcar'
rescue LoadError => e
  STDERR.puts e.message
  STDERR.puts "In development, you need to use `bundle exec bin/wellcar` to run your app"
  STDERR.puts "At install-time, RubyGems will make sure lib, etc. are in the load path"
  STDERR.puts "Feel free to remove this message from bin/wellcar now"
  exit 64
end

class App
  extend GLI::App

  program_desc 'Wellcar makes development of dockerised Rails apps easier'

  version Wellcar::VERSION

  subcommand_option_handling :normal
  arguments :strict

  desc 'Creates a new docked Rails app'
  arg 'name'
  command :new do |c|
    c.desc "Force-delete if folder matching <name> exists"
    c.switch "full-nuke"
    
    c.flag [:d, :domain],
      desc: "Used to set a domain name in configuration files, e.g. nginx config",
      default: ""

    c.flag "github-account",
      required: true,
      desc: "Sets the GitHub account used in building Docker image paths (which assumes images are hosted as GitHub Packages)"
    c.action do |global_options, options, args|
      Wellcar::Commands::New.new(args[0], options['github-account'], options[:domain]).call options, args
    end
  end

  desc 'Adds docker config to an existing Rails application'
  command :dock do |c|
    c.switch "force-new",
      desc: 'Forces all existing docker files to be overwritten and images to be rebuilt'

    c.flag [:d, :domain],
      desc: "Used to set a domain name in configuration files, e.g. nginx config",
      default: ""

    c.flag "github-account",
      desc: "Sets the GitHub account used in building Docker image paths (which assumes images are hosted as GitHub Packages)",
      required: true

    c.action do |global_options, options, args|
      Wellcar::Commands::Dock.new(options['github-account'], options[:domain]).call options, args
    end
  end

  desc 'Builds an image for production and deploys to a named remote server'
  command :deploy do |c|
    # Build the production image
    # Save the image locally 
    # Set DOCKER_HOST to connect to remote server
    # Copy onto remote host to load into docker on remote host
    #   Perhaps like:
    #   docker save mycontainerimage |\
    #     gzip |\
    #     ssh root@203.0.113.1 'gunzip | docker load'
    #   Or:
    #   docker save <image-name> | gzip | scp -J <creds>:<destination>
    # Run docker stack deploy -c docker-stack.yml <app_name>
    #   Delete image on remote host?
  end

  desc 'Checks that a named remote server can run the production build'
  command :check_server do |c|
    c.action do |global_options, options, args|
      # Removes old versions of Docker
      # sudo apt-get remove docker docker-engine docker.io containerd runc
      # Assumes an Ubuntu server
      # Update repo
      # sudo apt-get update
      # Install required libraries
      # sudo apt-get install \
      #   sudo apt-get install \
			#     apt-transport-https \
			#     ca-certificates \
			#     curl \
			#     gnupg-agent \
			#     software-properties-common
      # Add Docker repo public key
      #   curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      # Check the key visually matches 9DC8 5822 9FC7 DD38 854A  E2D8 8D81 803C 0EBF CD88
      #   sudo apt-key fingerprint 0EBFCD88
      # Add the repository that matches the Ubuntu distro
      #   sudo add-apt-repository \
      #     "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
      #     $(lsb_release -cs) \
      #     stable"
      # Update again
      #   sudo apt-get update
      # Install Docker engine
      #   sudo apt-get install docker-ce docker-ce-cli containerd.io
      # Test Docker is installed properly
      #   sudo docker run --rm hello-world
      #   sudo docker images --all --format='{{.ID}} {{.Name}}'|\
      #     grep hello-world|\
      #     cut -d ' ' -f 1|\
      #     xargs docker rmi
      # Add user to docker group
      #   sudo usermod -a -G docker <username>
    end
  end

  desc 'Runs bundle within a container'
  arg_name 'Pass commands through to bundler. Note that to pass args to bundler, use `--` followed by the args, e.g. `wellcar bundle -- --help '
  command :bundle do |c|
    c.desc 'Set the container name to run bundle in'
    c.default_value 'web'
    c.arg_name 'name'
    c.flag [:c, :container]

    c.action do |global_options,options,args|
      container = options[:c]
      command = "COMPOSE_FILE=#{global_options[:c]} docker-compose run #{container} bundle "
      command << args * ' '

      puts "Full command: #{command}"
      system command
      
      if $?.exitstatus != 0
        puts "Unable to call bundle in #{container} successfully"
      else
        puts "bundle command ran in #{container}#{args.any? ? " with #{args}" : ""}"
      end
    end
  end
  
  desc 'Rebuilds containers'
  arg_name 'command'
  command :build do |c|
    c.action do |global_options, options, args|
      system("COMPOSE_FILE=#{global_options[:c]} docker-compose build")
    end
  end

  RAILS_DELEGATES = %w(g generate)

  desc 'Delegates to bin/rails within a running web container'
  arg_name 'arguments', :multiple
  command RAILS_DELEGATES do |c|
    c.action do |_, _, args|
      system "docker-compose exec web bin/rails #{c.name} #{args.join " "}"
    end
  end

  pre do |global,command,options,args|
    # Pre logic here
    # Return true to proceed; false to abort and not call the
    # chosen command
    # Use skips_pre before a command to skip this block
    # on that command only
    true
  end

  post do |global,command,options,args|
    # Post logic here
    # Use skips_post before a command to skip this
    # block on that command only
  end

  on_error do |exception|
    # Error logic here
    # return false to skip default error handling
    true
  end
end

exit App.run(ARGV)
